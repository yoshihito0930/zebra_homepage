---
// セレクトコンポーネントのプロパティ定義
interface Props {
  name: string;
  options: { value: string; label: string; disabled?: boolean }[];
  id?: string;
  label?: string;
  placeholder?: string;
  value?: string;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  helpText?: string;
  class?: string;
  size?: 'sm' | 'md' | 'lg';
  fullWidth?: boolean;
}

// プロパティのデフォルト値を設定
const {
  name,
  options,
  id = name,
  label,
  placeholder = '選択してください',
  value = '',
  required = false,
  disabled = false,
  error,
  helpText,
  class: className = '',
  size = 'md',
  fullWidth = false,
} = Astro.props;

// サイズに応じたクラス
const sizeClasses = {
  sm: 'px-2 py-1.5 text-sm',
  md: 'px-3 py-2 text-base',
  lg: 'px-4 py-2.5 text-lg',
};

// 幅のクラス
const widthClass = fullWidth ? 'w-full' : 'w-auto';

// 基本のクラス
const baseClasses = `appearance-none rounded-md border bg-white pr-8 transition-colors ${widthClass}`;

// 状態に応じたクラス
const stateClasses = error
  ? 'border-accent text-main focus:border-accent focus:ring-2 focus:ring-accent focus:ring-offset-2'
  : 'border-gray-light text-main focus:border-accent focus:ring-2 focus:ring-accent focus:ring-offset-2';

// 無効状態のクラス
const disabledClasses = disabled ? 'opacity-50 cursor-not-allowed bg-gray-light' : '';

// 最終的なクラス名を構築
const selectClasses = `${baseClasses} ${stateClasses} ${sizeClasses[size]} ${disabledClasses} ${className}`;
---

<div class={`mb-4 ${fullWidth ? 'w-full' : ''}`}>
  {label && (
    <label for={id} class="block text-sm font-medium text-main mb-1">
      {label}
      {required && <span class="text-accent ml-1">*</span>}
    </label>
  )}
  
  <div class="relative">
    <select
      id={id}
      name={name}
      required={required}
      disabled={disabled}
      class={selectClasses}
      aria-invalid={error ? 'true' : 'false'}
      aria-describedby={error ? `${id}-error` : helpText ? `${id}-description` : undefined}
    >
      {placeholder && (
        <option value="" selected={!value} disabled>
          {placeholder}
        </option>
      )}
      
      {options.map((option) => (
        <option
          value={option.value}
          selected={value === option.value}
          disabled={option.disabled}
        >
          {option.label}
        </option>
      ))}
    </select>
    
    <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-sub2">
      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
      </svg>
    </div>
  </div>
  
  {error && (
    <p id={`${id}-error`} class="mt-1 text-sm text-accent">
      {error}
    </p>
  )}
  
  {helpText && !error && (
    <p id={`${id}-description`} class="mt-1 text-sm text-sub2">
      {helpText}
    </p>
  )}
</div>
